autogen definitions info;

homedir="/home/ggerules/lilgp1.02/app/";
hitslongdata="/data/hitslong.csv";
sttlongdata="/data/sttlong.csv";
probname=prob028_lawnmower_8x12_genramptreesize;
output_detail=90;
prblm=28;
maxdepth=17;
useercs=0;
exe=gp;
pop=1000;
savepop=1;
maxgen=52;
numindruns=50;
lawnwidth=8;
lawnheight=12;

dtypestruct = "typedef struct
{
     short x;
     short y;
} vector;";
dtype = vector;

additionaldefines ="
#define APP_NORTH  0
#define APP_WEST   1
#define APP_SOUTH  2
#define APP_EAST   3

#define APP_UNMOWN 0
#define APP_MOWN   1

#define APP_DEFAULT_LAWN_WIDTH   8
#define APP_DEFAULT_LAWN_HEIGHT  12";

fitcases=1;

comment_app_initialize_vars = " ";

prob = {
 name = "Lawnmower 8x12 ";
 init1 = "ttx = (random_double()*3.0)-1.0;";
 init2 = "ttx = (random_double()*2.0);";
 init0 = "ttx = (random_double()*2.0)-1.0;";
 initn = "ttx = (random_double()*2.0)-1.0;";

};

objlst = { 
  datschm = 1;
  kname = "kernel_orig";
  frmwrk = 0;
  dirname = "orig_ywadf_nadf_ntypes_ncons_nwhatn" ; 
  kcat  = orig;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel_orig";
  frmwrk = 0;
  dirname = "orig_ywadf_yadf_ntypes_ncons_nwhatn" ; 
  kcat  = orig;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgp2.1";
  frmwrk = 1;
  dirname = "cgp2p1_nwadf_nadf_ntypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgp2.1";
  frmwrk = 1;
  dirname = "cgp2p1_nwadf_nadf_ntypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgp2.1";
  frmwrk = 1;
  dirname = "cgp2p1_nwadf_nadf_ytypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = y;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgp2.1";
  frmwrk = 1;
  dirname = "cgp2p1_nwadf_nadf_ytypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = y;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgpf2p1_ywadf_nadf_ntypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgpf2p1_ywadf_nadf_ntypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgpf2p1_ywadf_nadf_ytypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgpf2p1_ywadf_nadf_ytypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgpf2p1_ywadf_yadf_ntypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgpf2p1_ywadf_yadf_ntypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgpf2p1_ywadf_yadf_ytypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgpf2p1_ywadf_yadf_ytypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ncons_ywhat0" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = n;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ncons_ywhat1" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = n;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ncons_ywhat2" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = n;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ncons_ywhat3" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = n;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ycons_ywhat0" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = y;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ycons_ywhat1" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = y;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ycons_ywhat2" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = y;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ycons_ywhat3" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = y;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ntypes_ncons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ntypes_ycons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = y;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ntypes_ncons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ntypes_ycons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = y;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ytypes_ncons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = n;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ytypes_ycons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = y;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ytypes_ncons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = n;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ytypes_ycons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = y;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ntypes_ncons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ntypes_ycons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = y;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ntypes_ncons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ntypes_ycons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = y;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ytypes_ncons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = n;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ytypes_ycons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = y;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ytypes_ncons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = n;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ytypes_ycons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = y;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ntypes_ncons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ntypes_ycons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = y;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ntypes_ncons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ntypes_ycons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = y;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ytypes_ncons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = n;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ytypes_ycons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = y;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ytypes_ncons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = n;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ytypes_ycons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = y;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ntypes_ncons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ntypes_ycons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = y;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ntypes_ncons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ntypes_ycons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = y;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ytypes_ncons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = n;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_nadf_ytypes_ycons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = y;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ytypes_ncons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = n;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgpf2p1_ywadf_yadf_ytypes_ycons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = y;
  what  = 3;
  runnable = 1;
};

objlst = { 
  dirname = "plots" ; 
};

nadf = { 
 maxarg = 2;

 fset = {
  treename = main;

  ntypes_typelist = { row = float; }; 
  ntypes_root = float;

  ytypes_typelist = { row = float; }; 
  ytypes_root = float;

  ncons = { row = "F_(*)=";};
  ncons = { row = "F_(*)[*]=";};
  ncons = { row = "#must specify some TSpecs";};
  ncons = { row = "T_(*)[*]=*";};
  ncons = { row = "T_ROOT=*";};

  ycons = { row = "F_(*)=frog"; };
  ycons = { row = "F_(*)[*]=frog"; };
  ycons = { row = "F_ROOT=frog"; };
  ycons = { row = "T_(*)[*]=*"; };
  ycons = { row = "T_ROOT=*"; };

  strprintfdat = "%f";
 
  func = {
   name = f_frog; 
   altname = frog;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fmul (x y) (declare (-double-) x) (declare (-double-) y) (* x y))"; };
   argcnt = 1;
   ntypes_node = { row = "(float)=float"; };
   ytypes_node = { row = "(float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "vector jump;

     if ( g.abort )
          return args[0].d;

     switch ( g.dir )
     {
        case APP_NORTH:
          g.xpos += args[0].d.x;
          g.ypos -= args[0].d.y;
          break;
        case APP_SOUTH:
          g.xpos -= args[0].d.x;
          g.ypos += args[0].d.y;
          break;
        case APP_EAST:
          g.xpos += args[0].d.y;
          g.ypos += args[0].d.x;
          break;
        case APP_WEST:
          g.xpos -= args[0].d.y;
          g.ypos -= args[0].d.x;
          break;
     }
     g.xpos = ((g.xpos%g.lawn_width)+g.lawn_width)%g.lawn_width;
     g.ypos = ((g.ypos%g.lawn_height)+g.lawn_height)%g.lawn_height;
     g.lawn[g.xpos][g.ypos] = APP_MOWN;
     ++g.movecount;
     if ( g.movecount > 100 )
          g.abort = 1;

     return args[0].d;";
  };
  
  func = {
   name = f_vma; 
   altname = vma;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fdiv (x y) (declare (-double-) x) (declare (-double-) y) (if (= y 0.0) (/ 1 1) (/ x y)))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "vector sum;
     sum.x = ( args[0].d.x + args[1].d.x ) % g.lawn_width;
     sum.y = ( args[0].d.y + args[1].d.y ) % g.lawn_height;
     return sum;";
  };
  
  func = {
   name = f_prog2; 
   altname = prog2;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fsub (x y) (declare (-double-) x) (declare (-double-) y) (- x y))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[1].d;";
  };


  vars = {
   name = f_left; 
   altname = left;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_NORM;
   evaltree = -1;
   oper = "vector bob = {0,0};
     if ( g.abort )
          return bob;
     g.dir = (g.dir+1)%4;
     ++g.leftcount;
     if ( g.leftcount > 100 )
          g.abort = 1;
     return bob;";
  };

  vars = {
   name = f_mow; 
   altname = mow;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_NORM;
   evaltree = -1;
   oper = "vector bob = {0,0};

     if ( g.abort )
          return bob;

     switch ( g.dir )
     {
        case APP_NORTH:
          g.ypos = ( g.ypos + g.lawn_height - 1 ) % g.lawn_height;
          break;
        case APP_SOUTH:
          g.ypos = ( g.ypos + 1 ) % g.lawn_height;
          break;
        case APP_EAST:
          g.xpos = ( g.xpos + 1 ) % g.lawn_width;
          break;
        case APP_WEST:
          g.xpos = ( g.xpos + g.lawn_width - 1 ) % g.lawn_width;
          break;
     }
     g.lawn[g.xpos][g.ypos] = APP_MOWN;
     ++g.movecount;
     if ( g.movecount > 100 )
          g.abort = 1;
     return bob;";
  };

  ercs = {
   name = NULL; 
   altname = Rvm;
   ercfun = ercvecgen;
   ercstr = ercvecstr;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_ERC;
   evaltree = -1;
   fercgenbody = "r->x = random_int ( g.lawn_width );
  r->y = random_int ( g.lawn_height );";
   fercstrbody = "static char buffer[20];
  sprintf ( buffer, \"(%d,%d)\", d.x, d.y );
  return buffer;";
  };

 };
};

yadf = { 
 maxarg = 2;

 fset = {
  treename = main;

  ntypes_typelist = { row = float; }; 
  ntypes_root = float;

  ytypes_typelist = { row = float; }; 
  ytypes_root = float;

  ncons = { row = "F_(*)=";};
  ncons = { row = "F_(*)[*]=";};
  ncons = { row = "#must specify some TSpecs";};
  ncons = { row = "T_(*)[*]=*";};
  ncons = { row = "T_ROOT=*";};

  ycons = { row = "F_(*)=frog"; };
  ycons = { row = "F_(*)[*]=frog"; };
  ycons = { row = "F_ROOT=frog"; };
  ycons = { row = "T_(*)[*]=*"; };
  ycons = { row = "T_ROOT=*"; };

  strprintfdat = "%f";

  func = {
   name = f_frog; 
   altname = frog;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fmul (x y) (declare (-double-) x) (declare (-double-) y) (* x y))"; };
   argcnt = 1;
   ntypes_node = { row = "(float)=float"; };
   ytypes_node = { row = "(float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "vector jump;

     if ( g.abort )
          return args[0].d;

     switch ( g.dir )
     {
        case APP_NORTH:
          g.xpos += args[0].d.x;
          g.ypos -= args[0].d.y;
          break;
        case APP_SOUTH:
          g.xpos -= args[0].d.x;
          g.ypos += args[0].d.y;
          break;
        case APP_EAST:
          g.xpos += args[0].d.y;
          g.ypos += args[0].d.x;
          break;
        case APP_WEST:
          g.xpos -= args[0].d.y;
          g.ypos -= args[0].d.x;
          break;
     }
     g.xpos = ((g.xpos%g.lawn_width)+g.lawn_width)%g.lawn_width;
     g.ypos = ((g.ypos%g.lawn_height)+g.lawn_height)%g.lawn_height;
     g.lawn[g.xpos][g.ypos] = APP_MOWN;
     ++g.movecount;
     if ( g.movecount > 100 )
          g.abort = 1;

     return args[0].d;";
  };
  
  func = {
   name = f_vma; 
   altname = vma;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fdiv (x y) (declare (-double-) x) (declare (-double-) y) (if (= y 0.0) (/ 1 1) (/ x y)))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "vector sum;
     sum.x = ( args[0].d.x + args[1].d.x ) % g.lawn_width;
     sum.y = ( args[0].d.y + args[1].d.y ) % g.lawn_height;
     return sum;";
  };
  
  func = {
   name = f_prog2; 
   altname = prog2;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fsub (x y) (declare (-double-) x) (declare (-double-) y) (- x y))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[1].d;";
  };


  vars = {
   name = f_left; 
   altname = left;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_NORM;
   evaltree = -1;
   oper = "vector bob = {0,0};
     if ( g.abort )
          return bob;
     g.dir = (g.dir+1)%4;
     ++g.leftcount;
     if ( g.leftcount > 100 )
          g.abort = 1;
     return bob;";
  };

  vars = {
   name = f_mow; 
   altname = mow;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_NORM;
   evaltree = -1;
   oper = "vector bob = {0,0};

     if ( g.abort )
          return bob;

     switch ( g.dir )
     {
        case APP_NORTH:
          g.ypos = ( g.ypos + g.lawn_height - 1 ) % g.lawn_height;
          break;
        case APP_SOUTH:
          g.ypos = ( g.ypos + 1 ) % g.lawn_height;
          break;
        case APP_EAST:
          g.xpos = ( g.xpos + 1 ) % g.lawn_width;
          break;
        case APP_WEST:
          g.xpos = ( g.xpos + g.lawn_width - 1 ) % g.lawn_width;
          break;
     }
     g.lawn[g.xpos][g.ypos] = APP_MOWN;
     ++g.movecount;
     if ( g.movecount > 100 )
          g.abort = 1;
     return bob;";
  };

  ercs = {
   name = NULL; 
   altname = Rvm;
   ercfun = ercvecgen;
   ercstr = ercvecstr;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_ERC;
   evaltree = -1;
   fercgenbody = "r->x = random_int ( g.lawn_width );
  r->y = random_int ( g.lawn_height );";
   fercstrbody = "static char buffer[20];
  sprintf ( buffer, \"(%d,%d)\", d.x, d.y );
  return buffer;";
  };

  adffunc = {
   name = NULL; 
   altname = adf0;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de adf0(a0) (declare (-double-) a0)"; };
   argcnt = -1;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   typeb = EVAL_EXPR;
   type = EVAL_DATA;
   evaltree = 1;
   oper = "";
  };

  adffunc = {
   name = NULL; 
   altname = adf1;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de adf1(a0 a1) (declare (-double-) a0) (declare (-double-) a1)"; };
   argcnt = -1;
   ntypes_node = { row = "(float)=float"; };
   ytypes_node = { row = "(float)=float"; };
   typeb = EVAL_EXPR;
   type = EVAL_DATA;
   evaltree = 2;
   oper = "";
  };

 };

 fset = {
  treename = adf0;

  ntypes_typelist = { row = float; }; 
  ntypes_root = float;

  ytypes_typelist = { row = float; }; 
  ytypes_root = float;

  ncons = { row = "F_(*)=";};
  ncons = { row = "F_(*)[*]=";};
  ncons = { row = "#must specify some TSpecs";};
  ncons = { row = "T_(*)[*]=*";};
  ncons = { row = "T_ROOT=*";};

  ycons = { row = "F_(*)="; };
  ycons = { row = "F_(*)[*]="; };
  ycons = { row = "F_ROOT="; };
  ycons = { row = "T_(*)[*]=*"; };
  ycons = { row = "T_ROOT=*"; };

  strprintfdat = "%f";

  func = {
   name = f_vma; 
   altname = vma;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fdiv (x y) (declare (-double-) x) (declare (-double-) y) (if (= y 0.0) (/ 1 1) (/ x y)))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "vector sum;
     sum.x = ( args[0].d.x + args[1].d.x ) % g.lawn_width;
     sum.y = ( args[0].d.y + args[1].d.y ) % g.lawn_height;
     return sum;";
  };
  
  func = {
   name = f_prog2; 
   altname = prog2;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fsub (x y) (declare (-double-) x) (declare (-double-) y) (- x y))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[1].d;";
  };


  vars = {
   name = f_left; 
   altname = left;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_NORM;
   evaltree = -1;
   oper = "vector bob = {0,0};
     if ( g.abort )
          return bob;
     g.dir = (g.dir+1)%4;
     ++g.leftcount;
     if ( g.leftcount > 100 )
          g.abort = 1;
     return bob;";
  };

  vars = {
   name = f_mow; 
   altname = mow;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_NORM;
   evaltree = -1;
   oper = "vector bob = {0,0};

     if ( g.abort )
          return bob;

     switch ( g.dir )
     {
        case APP_NORTH:
          g.ypos = ( g.ypos + g.lawn_height - 1 ) % g.lawn_height;
          break;
        case APP_SOUTH:
          g.ypos = ( g.ypos + 1 ) % g.lawn_height;
          break;
        case APP_EAST:
          g.xpos = ( g.xpos + 1 ) % g.lawn_width;
          break;
        case APP_WEST:
          g.xpos = ( g.xpos + g.lawn_width - 1 ) % g.lawn_width;
          break;
     }
     g.lawn[g.xpos][g.ypos] = APP_MOWN;
     ++g.movecount;
     if ( g.movecount > 100 )
          g.abort = 1;
     return bob;";
  };

  ercs = {
   name = NULL; 
   altname = Rvm2;
   ercfun = ercvecgen;
   ercstr = ercvecstr;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_ERC;
   evaltree = -1;
   fercgenbody = "r->x = random_int ( g.lawn_width );
  r->y = random_int ( g.lawn_height );";
   fercstrbody = "static char buffer[20];
  sprintf ( buffer, \"(%d,%d)\", d.x, d.y );
  return buffer;";
  };

 };

 fset = {
  treename = adf1;

  ntypes_typelist = { row = float; }; 
  ntypes_root = float;

  ytypes_typelist = { row = float; }; 
  ytypes_root = float;

  ncons = { row = "F_(*)=";};
  ncons = { row = "F_(*)[*]=";};
  ncons = { row = "#must specify some TSpecs";};
  ncons = { row = "T_(*)[*]=*";};
  ncons = { row = "T_ROOT=*";};

  ycons = { row = "F_(*)=frog"; };
  ycons = { row = "F_(*)[*]=frog"; };
  ycons = { row = "F_ROOT=frog"; };
  ycons = { row = "T_(*)[*]=*"; };
  ycons = { row = "T_ROOT=*"; };

  strprintfdat = "%f";

  vars = {
   name = f_left; 
   altname = left;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_NORM;
   evaltree = -1;
   oper = "vector bob = {0,0};
     if ( g.abort )
          return bob;
     g.dir = (g.dir+1)%4;
     ++g.leftcount;
     if ( g.leftcount > 100 )
          g.abort = 1;
     return bob;";
  };

  vars = {
   name = f_mow; 
   altname = mow;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_NORM;
   evaltree = -1;
   oper = "vector bob = {0,0};

     if ( g.abort )
          return bob;

     switch ( g.dir )
     {
        case APP_NORTH:
          g.ypos = ( g.ypos + g.lawn_height - 1 ) % g.lawn_height;
          break;
        case APP_SOUTH:
          g.ypos = ( g.ypos + 1 ) % g.lawn_height;
          break;
        case APP_EAST:
          g.xpos = ( g.xpos + 1 ) % g.lawn_width;
          break;
        case APP_WEST:
          g.xpos = ( g.xpos + g.lawn_width - 1 ) % g.lawn_width;
          break;
     }
     g.lawn[g.xpos][g.ypos] = APP_MOWN;
     ++g.movecount;
     if ( g.movecount > 100 )
          g.abort = 1;
     return bob;";
  };

  ercs = {
   name = NULL; 
   altname = Rvm;
   ercfun = ercvecgen;
   ercstr = ercvecstr;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_ERC;
   evaltree = -1;
   fercgenbody = "r->x = random_int ( g.lawn_width );
  r->y = random_int ( g.lawn_height );";
   fercstrbody = "static char buffer[20];
  sprintf ( buffer, \"(%d,%d)\", d.x, d.y );
  return buffer;";
  };

  adfarg = {
   name = NULL; 
   altname = a0;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_ARG;
   evaltree = 0;
  };

  func = {
   name = f_frog; 
   altname = frog;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fmul (x y) (declare (-double-) x) (declare (-double-) y) (* x y))"; };
   argcnt = 1;
   ntypes_node = { row = "(float)=float"; };
   ytypes_node = { row = "(float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "vector jump;

     if ( g.abort )
          return args[0].d;

     switch ( g.dir )
     {
        case APP_NORTH:
          g.xpos += args[0].d.x;
          g.ypos -= args[0].d.y;
          break;
        case APP_SOUTH:
          g.xpos -= args[0].d.x;
          g.ypos += args[0].d.y;
          break;
        case APP_EAST:
          g.xpos += args[0].d.y;
          g.ypos += args[0].d.x;
          break;
        case APP_WEST:
          g.xpos -= args[0].d.y;
          g.ypos -= args[0].d.x;
          break;
     }
     g.xpos = ((g.xpos%g.lawn_width)+g.lawn_width)%g.lawn_width;
     g.ypos = ((g.ypos%g.lawn_height)+g.lawn_height)%g.lawn_height;
     g.lawn[g.xpos][g.ypos] = APP_MOWN;
     ++g.movecount;
     if ( g.movecount > 100 )
          g.abort = 1;

     return args[0].d;";
  };
  
  func = {
   name = f_vma; 
   altname = vma;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fdiv (x y) (declare (-double-) x) (declare (-double-) y) (if (= y 0.0) (/ 1 1) (/ x y)))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "vector sum;
     sum.x = ( args[0].d.x + args[1].d.x ) % g.lawn_width;
     sum.y = ( args[0].d.y + args[1].d.y ) % g.lawn_height;
     return sum;";
  };
  

  func = {
   name = f_prog2; 
   altname = prog2;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fsub (x y) (declare (-double-) x) (declare (-double-) y) (- x y))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[1].d;";
  };

  adffunc = {
   name = NULL; 
   altname = adf0;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de adf0(a0) (declare (-double-) a0)"; };
   argcnt = -1;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   typeb = EVAL_EXPR;
   type = EVAL_DATA;
   evaltree = 1;
   oper = "";
  };

 };
};



