(ql:quickload "read-csv" :silent t)
(ql:quickload "cl-strings" :silent t)
(use-package :read-csv)
(use-package :cl-strings)
;;read in csv file
(defvar flowerloc)
(defvar fv)
(defvar lc)
(defvar row)
(defvar rc)
(defvar fc)
(defvar xx)
(defvar yy)
(defvar zz)
(defvar fcn)
(defvar xxn)
(defvar yyn)
(defvar zzn)
(defvar pt)
(defvar g)
(defvar a0)
(setf lc 0)
(setf rc 0)
(defstruct vec (x 0) (y 0) (z 0)) ; define structure
;; Loading fitness cases .....
(defstruct gdat 
 (pfl (make-array '(10 10) :initial-element (make-vec :x 0.0 :y 0.0 :z 0.0)))
 (pvis(make-array '(10) :initial-element 0))
 (nNumFlowers 10) ;int nNumFlowers;
 (lawn_width 10)  ;float lawn_width;
 (lawn_height 10) ;float lawn_height;
 (lawn_depth 10)  ;float lawn_depth;
 (xpos 0.0)       ;float xpos;
 (ypos 0.0)       ;float ypos;
 (zpos 0.0)       ;float zpos;
 (curfc 0)        ; current fitness case
 ;int movecount;
 ;int abort;
)
(setf g (make-gdat :nNumFlowers 10 :lawn_width 10 :lawn_depth 10 :xpos 0 :ypos 0 :zpos 0)) 
(setf fv (with-open-file (s "./file.dat") (parse-csv s)))
;; load flowers locations in to fitness cases array
(loop for row in fv
  do(setf fc (nth 0 row))
  do(setf fcn (parse-number fc))
  do(setf xx (nth 1 row))
  do(setf xxn (parse-number xx))
  do(setf yy (nth 2 row))
  do(setf yyn (parse-number yy))
  do(setf zz (nth 3 row))
  do(setf zzn (parse-number zz))
  ;;do(format t "~a,~a,~a,~a~%"  fc xx yy zz)
  (setf pt (make-vec :x xxn :y yyn :z zzn)) ;  set value of slots of var 
  do(setf (aref (gdat-pfl g) fcn rc) pt)
  do(setf rc (+ rc 1))
  do(if (> rc 9) (setf rc 0) )
  do(setf lc (+ lc 1))
)
;; functions.....
(defun vadd (a b)
 (make-vec :x (+ (vec-x a) (vec-x b)) :y (+ (vec-y a) (vec-y b)) :z (+ (vec-z a) (vec-z b)) )
)
(defun vsub (a b)
 (make-vec :x (- (vec-x a) (vec-x b)) :y (- (vec-y a) (vec-y b)) :z (- (vec-z a) (vec-z b)) )
)
(defun gox (a)
 (setf (gdat-xpos g) (+ (gdat-xpos g) (vec-x a)))
 ;;check if bee is near a flower
 (terpri)
 (loop for i from 0 below (gdat-nNumFlowers g) do
   (if(<= (abs(- (vec-x (aref (gdat-pfl g) (gdat-curfc g) i)) (vec-x a))) 0.9) 
    (if(<= (abs(- (vec-y (aref (gdat-pfl g) (gdat-curfc g) i)) (vec-y a))) 0.9)
     (if(<= (abs(- (vec-z (aref (gdat-pfl g) (gdat-curfc g) i)) (vec-z a))) 0.9)
      (setf (aref (gdat-pvis g) i) 1)
     )
    )
   )
 )
 (make-vec :x 0.0 :y 0.0 :z 0.0 )
)
(defun goy (a)
 (setf (gdat-ypos g) (+ (gdat-ypos g) (vec-y a)))
 ;;check if bee is near a flower
 (terpri)
 (loop for i from 0 below (gdat-nNumFlowers g) do
   (if(<= (abs(- (vec-x (aref (gdat-pfl g) (gdat-curfc g) i)) (vec-x a))) 0.9) 
    (if(<= (abs(- (vec-y (aref (gdat-pfl g) (gdat-curfc g) i)) (vec-y a))) 0.9)
     (if(<= (abs(- (vec-z (aref (gdat-pfl g) (gdat-curfc g) i)) (vec-z a))) 0.9)
      (setf (aref (gdat-pvis g) i) 1)
     )
    )
   )
 )
 (make-vec :x 0.0 :y 0.0 :z 0.0 )
)
(defun goz (a)
 (setf (gdat-zpos g) (+ (gdat-zpos g) (vec-z a)))
 ;;check if bee is near a flower
 (terpri)
 (loop for i from 0 below (gdat-nNumFlowers g) do
   (if(<= (abs(- (vec-x (aref (gdat-pfl g) (gdat-curfc g) i)) (vec-x a))) 0.9) 
    (if(<= (abs(- (vec-y (aref (gdat-pfl g) (gdat-curfc g) i)) (vec-y a))) 0.9)
     (if(<= (abs(- (vec-z (aref (gdat-pfl g) (gdat-curfc g) i)) (vec-z a))) 0.9)
      (setf (aref (gdat-pvis g) i) 1)
     )
    )
   )
 )
 (make-vec :x 0.0 :y 0.0 :z 0.0 )
)
(defun nf()
 (aref (gdat-pfl g) (gdat-curfc g) (random 10))
)
(defun bee()
 (make-vec :x (gdat-xpos g) :y (gdat-ypos g) :z (gdat-zpos g) ) ;  set value of slots of var 
)
(defun adf0(a0) 

 (goy (gox (gox (vsub (vadd (vadd (vsub (goz a0)
                                        (goy a0))
                                  (prog2 (gox a0)
                                         (goz (vsub a0 bee))))
                            (prog2 (prog2 (goy nf)
                                          (goz (vsub a0 bee)))
                                   (prog2 nf
                                          (vadd (gox nf) nf))))
                      (goy bee)))))
)
(defun main ()  
 (vsub (prog2 (gox (vsub (goy (goy (adf0 (vsub nf bee))))
                         (vsub (adf0 (goy (goy (goy (goy (goy (adf0 (vsub nf bee))))))))
                               (prog2 (vadd bee nf) (make-vec :x 4.021801 :y -0.088436 :z 4.501209)))))
              (prog2 (vsub (goz (vadd nf nf))
                           (goz (goz (goz (make-vec :x 0.791100 :y 4.080688 :z -3.222522)))))
                     (adf0 (goz bee))))
       (prog2 (gox (vsub (prog2 (gox (vsub (goy (goy (adf0 (vsub nf bee))))
                                           (gox (vsub (goy (goy (adf0 (vsub nf bee))))
                                                      (prog2 (prog2 nf (make-vec :x -2.681538 :y -3.853039 :z 2.405383))
                                                             (vadd (gox (vsub (goy (goy (adf0 (vsub nf bee))))
                                                                              (goy (vsub nf bee)))) bee))))))
                                (prog2 (vsub (goz (vadd nf nf))
                                             (prog2 (prog2 (gox (vsub (goy (goy (adf0 (vsub nf bee))))
                                                                      (prog2 (prog2 nf (make-vec :x -2.681538 :y -3.853039 :z 2.405383))
                                                                             (vadd (make-vec :x -2.991325 :y 3.237837 :z 4.069861) bee))))
                                                           (prog2 (vsub (gox nf)
                                                                        (prog2 bee (make-vec :x 4.021801 :y -0.088436 :z 4.501209)))
                                                                  (adf0 (goz bee)))) (make-vec :x 4.021801 :y -0.088436 :z 4.501209)))
                                       (adf0 (goz bee))))
                         (adf0 (goy (goy (gox bee))))))
              (goy (goy (adf0 (vsub nf bee))))))
)
(loop for fc from 0 below 10 do
 (setf (gdat-curfc g) fc)
 (setf (gdat-xpos g) 0.0)
 (setf (gdat-ypos g) 0.0)
 (setf (gdat-zpos g) 0.0)
 (loop for i from 0 below 10 do
  (setf (aref (gdat-pvis g) i) 0)
 )
 ;;(if(eql fc 3) (progn (print g) (quit) ))
 ;;(format t "fitness case ~d: ~s~%" fc (gdat-pvis g))
 ;;(print (gdat-pvis g))
 (main)
 (format t "fitness case ~d: ~s~%" fc (gdat-pvis g))
 ;;(print (gdat-pvis g))
)
(quit)
