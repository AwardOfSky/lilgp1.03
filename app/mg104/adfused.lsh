(lush-is-quiet t)

(defvar bf (filter (lambda (f) (str-endswith f "bind")) (files ".")))
;(print bf)
(defvar f)
(defvar p)
(defvar m)
(defvar h)
(defvar i)

(defvar adf0cnt)
(defvar adf1cnt)

(do ((fp bf)) while (<> fp -1) 
  (setq f (basename fp "bind"))
  (printf "%s\n" (str-cat f ".bind"))
  (load (str-cat f ".bind") ) 
  ;(printf "%s %s\n" (str-cat f ".bind") (str-cat f ".dat"))
  ;(setq p (flatten (funcdef main)))
  ;(printf "%s" (str-cat f ": "))
  ;(setq m (load-array (str-cat f ".dat")))
  ;(setq h 0)
  ;(for (i 0 (- 32 1))
  ; (setq  (m i 0))
  ; (setq left (m i (+ 0 1)))
  ; (setq mow (m i (+ 1 1)))
  ; (if (< (abs (- (main left mow) (m i 0))) 0.01) ( incr h) ())
  ;)

  ;(if (= h fc) (printf "PASS: Hits=%l/32 " h) (printf "FAIL: Hits=%l/32 " h))
  
  ;(setq adf0cnt 0)
  ;(setq adf1cnt 0)
  ;(do ((it p)) while (<> it -1)
   ;(prin (symbol-name it))
  ; (when (symbolp it) 
  ;  (if (= (symbol-name it) "adf0") (incr adf0cnt) ())
  ; )
   ;(when (symbolp it) 
   ; (if (= (symbol-name it) "adf1") (incr adf1cnt) ())
   ;)
  ;)
  ;(printf " adf0 Used=%l " adf0cnt)
  ;(printf " adf1 Used=%l " adf1cnt)
  ;(print)
)

