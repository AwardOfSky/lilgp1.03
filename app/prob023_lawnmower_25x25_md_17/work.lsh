(lush-is-quiet t)
(de fmul (x y) (declare (-double-) x) (declare (-double-) y) (* x y))
(de fdiv (x y) (declare (-double-) x) (declare (-double-) y) (/ x y))
(de fsub (x y) (declare (-double-) x) (declare (-double-) y) (- x y))
(de fadd (x y) (declare (-double-) x) (declare (-double-) y) (+ x y))
(de adf0(a0 a1) (declare (-double-) a0) (declare (-double-) a1) 
 (fadd a0 a1)
)
(de main (x)
 (adf0 (fmul (fmul x x)
             (adf0 x
                   (fmul x x)))
       (adf0 (fmul x x) x))
)
(each ((arg (cdr argv)))
 (defvar m (load-array arg))
 (defvar p (flatten (funcdef main)))
 (defvar cnt 0)
 (let ((h 0))
  (for (i 0 20)
;  ( prin (main(m 1 i)) (m 0 i) (- (main(m 1 i)) (m 0 i) ) )
;  (print)
;  (if (< (abs (- (main(m 1 i)) (m 0 i) )) 0.01) ( print "hit" ) ())
   (if (< (abs (- (main(m 1 i)) (m 0 i) )) 0.01) ( incr h) ())
  )
  (if (= h 21) (printf "%s " "PASS=") (printf "%s" "FAIL="))
 )
 (do ((it p)) while (<> it -1)
  (if (= (symbol-name it) "adf0") (incr cnt) ()) 
;  (prinf it)
 ) 
 (print cnt)
)
;(dhc-make () fmul fdiv fsub fadd main)
