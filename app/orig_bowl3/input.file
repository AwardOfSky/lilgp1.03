###
### input parameter file for the bowl3 problem [(x^2) + (y^2) + (z^2)].
###

#pop_size = 1000
#max_generations = 52

#random_seed = 1
#output.basename = bowl3-acgp2

# how to generate the initial population
init.method = half_and_half
init.depth = 2-8

app.use_genramp=0
tree[0].max_depth=5
tree[1].max_depth=5
tree[2].max_depth=5
app.genramp_max_tree_depth=17
app.genram_interval=4


# limits on tree size.
#max_nodes = 1000
#max_depth = 20

# comment these out if seperate runs are used instead of subpops
# multiple.subpops = 10
# multiple.exch_gen = 501
# multiple.exchanges = 10

# acgp parameters

acgp.use_trees_prct=0.01
acgp.select_all=0
acgp.extract_quality_prct=0.98
acgp.gen_start_prct=0.04
acgp.gen_step=20
acgp.gen_slope=1
acgp.gen_slope_prct=0.3333
acgp.0_threshold_prct=0.025
acgp.what=2
acgp.stop_on_term=1
acgp.use_expressed=1
acgp.level=1

breed_phases = 3

breed[1].operator = crossover, select=(tournament,size=7)
breed[1].rate = 0.9

#breed[2].operator = mutation, select=(tournament,size=7), method=half_and_half, depth=3-5
breed[2].operator = mutation, select=(tournament,size=7), depth=3-5
breed[2].rate = 0.05

breed[3].operator = reproduction, select=(tournament,size=7)
breed[3].rate = 0.05

# breed[4].operator = uniform_mutate, select=(tournament,size=7)
# breed[4].rate = 0.01

# this operator for regrowing a tree on specific generations only
# must be listed last
# breed[4].operator = regrow2, select=worst, method=half_and_half, depth=2-6
# breed[4].rate = 0.00001
