(lush-is-quiet t)
;(chdir "./tmp")
(defconstant fc 10)
(defvar ttz)
(defvar l0)
(defvar w0)
(defvar h0)
(defvar l1)
(defvar w1)
(defvar h1)

(each ((arg (cdr argv)))
 (defvar f (basename arg "bind"))
 (printf "%s %s\n" (str-cat f ".bind") (str-cat f ".dat"))
 (load (str-cat f ".bind"))
 (defvar m (load-array (str-cat f ".dat")))
 (defvar p (flatten (funcdef main)))
 (defvar cnt 0)
 (setq cnt 0)
 (let ((h 0))
  (for (r 0 9)
   (setq ttz (m r 0))
   (setq l0 (m r 1))
   (setq w0 (m r 2))
   (setq h0 (m r 3))
   (setq l1 (m r 4))
   (setq w1 (m r 5))
   (setq h1 (m r 6))
   (printf "ttz=%.5f, l0=%.5f, w0=%.5f, h0=%.5f, l1=%.5f, w1=%.5f, h1=%.5f, (main l0 w0 h0 l1 w1 h1)=%.5f diff=%.5f\n" 
    ttz 
    l0
    w0
    h0
    l1
    w1
    h1
    (main l0 w0 h0 l1 w1 h1)
    (- (main l0 w0 h0 l1 w1 h1) ttz)
   )
   ;( printf "ttz=%.5f, ttx=%.5f (main %.5f)=%.5f diff=%.5f\n" (m 0 i) (m 1 i) (m 1 i) (main(m 1 i))  (- (main(m 1 i)) (m 0 i) ) )
;   (if (< (abs (- (main l0 w0 h0 l1 w1 h1) (m r 0))) 0.01) ( print "hit" ) ())
;   (if (< (abs (- (main l0 w0 h0 l1 w1 h1) (m r 0))) 0.01) ( incr h) ())
;   (for (i 0 6)
;     (printf "%.5f " (m r i))
;   )
;   (print)
;   (printf "%.5f %.5f %.5f %.5f %.5f %.5f %.5f" ttz l0 w0 h0 l1 w1 h1)
;   (print)
  )
  ;(if (= h fc) (printf "PASS: Hits=%l/10 ADFs Used=" h) (printf "FAIL: Hits=%l/10 ADFs Used=" h))
 )
 (do ((it p)) while (<> it -1)
  (if (= (symbol-name it) "adf0") (incr cnt) ()) 
   ;(print it)
 ) 
 (printf "%l adfs used in main\n" cnt)
)
;(dhc-make () fmul fdiv fsub fadd main)
