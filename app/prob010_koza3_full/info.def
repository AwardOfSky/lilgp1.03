autogen definitions info;

homedir="/home/ggerules/lilgp1.02/app/";
hitslongdata="/data/hitslong.csv";
sttlongdata="/data/sttlong.csv";
probname=prob010_koza3_full;
output_detail=90;
prblm=10;
maxdepth=5;
useercs=0;
exe=gp;
pop=4000;
savepop=1;
maxgen=50;
numindruns=50;

dtype = double ;
fitcases=20;

comment_app_initialize_vars = " ";

rvar = {
 name = ttz;
 altname = z;
 argcnt = 0;
};

prob = {
 name = Koza1;
 init1 = "ttx = (random_double()*3.0)-1.0;";
 init2 = "ttx = (random_double()*2.0);";
 init0 = "ttx = (random_double()*2.0)-1.0;";
 init = "ttx = (random_double()*2.0)-1.0;";
 interval = "/*used to help allocate memory for this problem*/
  inter_min = 1;
  inter_max = 21;
  interv = 1;";

 calc = "ttz = ttx*ttx*ttx*ttx*ttx*ttx - 2.0*ttx*ttx*ttx*ttx + ttx*ttx;";

 strprintf = "%f = %f*%f*%f*%f*%f*%f - 2.0*%f*%f*%f*%f + %f*%f)";
 strprintfvar = "ttz,ttx,ttx,ttx,ttx,ttx,ttx,ttx,ttx,ttx",ttx,ttx,ttx;
 str = "z = x*x*x*x*x - 2.0*x*x*x*x + x*x";
};

objlst = { 
  datschm = 1;
  kname = "kernel_orig";
  frmwrk = 0;
  dirname = "orig_ywadf_nadf_ntypes_ncons_nwhatn" ; 
  kcat  = orig;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel_orig";
  frmwrk = 0;
  dirname = "orig_ywadf_yadf_ntypes_ncons_nwhatn" ; 
  kcat  = orig;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgp2.1";
  frmwrk = 1;
  dirname = "cgp2p1_nwadf_nadf_ntypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgp2.1";
  frmwrk = 1;
  dirname = "cgp2p1_nwadf_nadf_ntypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgp2.1";
  frmwrk = 1;
  dirname = "cgp2p1_nwadf_nadf_ytypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = y;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgp2.1";
  frmwrk = 1;
  dirname = "cgp2p1_nwadf_nadf_ytypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = y;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgp2p1_ywadf_nadf_ntypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgp2p1_ywadf_nadf_ntypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgp2p1_ywadf_nadf_ytypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgp2p1_ywadf_nadf_ytypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgp2p1_ywadf_yadf_ntypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgp2p1_ywadf_yadf_ntypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgp2p1_ywadf_yadf_ytypes_ncons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = n;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.cgpf2.1";
  frmwrk = 2;
  dirname = "cgp2p1_ywadf_yadf_ytypes_ycons_nwhatn" ; 
  kcat  = cgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = y;
  what  = n;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ncons_ywhat0" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = n;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ncons_ywhat1" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = n;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ncons_ywhat2" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = n;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ncons_ywhat3" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = n;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ycons_ywhat0" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = y;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ycons_ywhat1" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = y;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ycons_ywhat2" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = y;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgp1.1.2";
  frmwrk = 3;
  dirname = "acgp1p1p2_nwadf_nadf_ntypes_ycons_ywhat3" ; 
  kcat  = acgp1p1p2;
  tmp   = 1;
  wadf  = n;
  adf   = n;
  types = n;
  cons  = y;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ntypes_ncons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ntypes_ycons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = y;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ntypes_ncons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ntypes_ycons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = y;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ytypes_ncons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = n;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ytypes_ycons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = y;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ytypes_ncons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = n;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ytypes_ycons_ywhat0" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = y;
  what  = 0;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ntypes_ncons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ntypes_ycons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = y;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ntypes_ncons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ntypes_ycons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = y;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ytypes_ncons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = n;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ytypes_ycons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = y;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ytypes_ncons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = n;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ytypes_ycons_ywhat1" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = y;
  what  = 1;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ntypes_ncons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ntypes_ycons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = y;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ntypes_ncons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ntypes_ycons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = y;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ytypes_ncons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = n;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ytypes_ycons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = y;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ytypes_ncons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = n;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ytypes_ycons_ywhat2" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = y;
  what  = 2;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ntypes_ncons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = n;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ntypes_ycons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = n;
  cons  = y;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ntypes_ncons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = n;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ntypes_ycons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = n;
  cons  = y;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ytypes_ncons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = n;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_nadf_ytypes_ycons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = n;
  types = y;
  cons  = y;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ytypes_ncons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = n;
  what  = 3;
  runnable = 1;
};

objlst = { 
  datschm = 1;
  kname = "kernel.acgpf2.1";
  frmwrk = 4;
  dirname = "acgp2p1_ywadf_yadf_ytypes_ycons_ywhat3" ; 
  kcat  = acgp2p1;
  tmp   = 1;
  wadf  = y;
  adf   = y;
  types = y;
  cons  = y;
  what  = 3;
  runnable = 1;
};

objlst = { 
  dirname = "plots" ; 
};

nadf = { 
 maxarg = 2;

 fset = {
  treename = main;

  ntypes_typelist = { row = float; }; 
  ntypes_root = float;

  ytypes_typelist = { row = float; }; 
  ytypes_root = float;

  ncons = { row = "F_(*)=";};
  ncons = { row = "F_(*)[*]=";};
  ncons = { row = "#must specify some TSpecs";};
  ncons = { row = "T_(*)[*]=*";};
  ncons = { row = "T_ROOT=*";};

  ycons = { row = "F_(*)=fdiv"; };
  ycons = { row = "F_(*)[*]=fdiv"; };
  ycons = { row = "F_ROOT="; };
  ycons = { row = "T_(*)[*]=*"; };
  ycons = { row = "T_ROOT=*"; };

  strprintfdat = "%f";

  func = {
   name = fadd; 
   altname = fadd;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fadd (x y) (declare (-double-) x) (declare (-double-) y) (+ x y))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[0].d + args[1].d;";
  };

  func = {
   name = fsub; 
   altname = fsub;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fsub (x y) (declare (-double-) x) (declare (-double-) y) (- x y))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[0].d - args[1].d;";
  };
  
  func = {
   name = fmul; 
   altname = fmul;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fmul (x y) (declare (-double-) x) (declare (-double-) y) (* x y))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[0].d * args[1].d;";
  };
  
  func = {
   name = fdiv; 
   altname = fdiv;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fdiv (x y) (declare (-double-) x) (declare (-double-) y) (if (= y 0.0) (/ 1 1) (/ x y)))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "if ( args[1].d == 0.0 )
          return 1.0;
     else
          return args[0].d / args[1].d;";
  };
  
  vars = {
   name = ttx; 
   altname = x;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_NORM;
   evaltree = -1;
  };

  ercs = {
   name = NULL; 
   altname = R;
   ercfun = ercgen;
   ercstr = ercstr;
   lispdefunFIX = { row = "(de R() (1))"; };
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_ERC;
   evaltree = -1;
   fercgenbody = "(random_double()*2.0) - 1.0;";
   fercstrbody = "static char buffer[20];
  sprintf ( buffer, \"%.5f\", d );
  return buffer;";
  };

 };
};

yadf = { 
 maxarg = 2;

 fset = {
  treename = main;

  ntypes_typelist = { row = float; }; 
  ntypes_root = float;

  ytypes_typelist = { row = float; }; 
  ytypes_root = float;

  ncons = { row = "F_(*)=";};
  ncons = { row = "F_(*)[*]=";};
  ncons = { row = "#must specify some TSpecs";};
  ncons = { row = "T_(*)[*]=*";};
  ncons = { row = "T_ROOT=*";};

  ycons = { row = "F_(*)=fdiv"; };
  ycons = { row = "F_(*)[*]=fdiv"; };
  ycons = { row = "F_ROOT="; };
  ycons = { row = "T_(*)[*]=*"; };
  ycons = { row = "T_ROOT=*"; };

  strprintfdat = "%f";

  func = {
   name = fadd; 
   altname = fadd;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fadd (x y) (declare (-double-) x) (declare (-double-) y) (+ x y))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[0].d + args[1].d;";
  };

  func = {
   name = fsub; 
   altname = fsub;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fsub (x y) (declare (-double-) x) (declare (-double-) y) (- x y))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[0].d - args[1].d;";
  };

  func = {
   name = fmul; 
   altname = fmul;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fmul (x y) (declare (-double-) x) (declare (-double-) y) (* x y))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[0].d * args[1].d;";
  };
  
  func = {
   name = fdiv; 
   altname = fdiv;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de fdiv (x y) (declare (-double-) x) (declare (-double-) y) (if (= y 0.0) (/ 1 1) (/ x y)))"; };
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "if ( args[1].d == 0.0 )
          return 1.0;
     else
          return args[0].d / args[1].d;";
  };
  
  vars = {
   name = ttx; 
   altname = x;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_NORM;
   evaltree = -1;
  };

  adffunc = {
   name = NULL; 
   altname = adf0;
   ercfun = NULL;
   ercstr = NULL;
   lispdefun = { row = "(de adf0 (a0 a1) (declare (-double-) a0) (declare (-double-) a1)"; };
   argcnt = -1;
   ntypes_node = { row = "(float float )=float"; };
   ytypes_node = { row = "(float float )=float"; };
   typeb = EVAL_EXPR;
   type = EVAL_DATA;
   evaltree = 1;
   oper = "";
  };

  ercs = {
   name = NULL; 
   altname = R;
   ercfun = ercgen;
   ercstr = ercstr;
   lispdefunFIX = { row = "(de R() (1))"; };
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_ERC;
   evaltree = -1;
   fercgenbody = "(random_double()*2.0) - 1.0;";
   fercstrbody = "static char buffer[20];
  sprintf ( buffer, \"%.5f\", d );
  return buffer;";
  };
 };

 fset = {
  treename = adf0;

  ntypes_typelist = { row = float; }; 
  ntypes_root = float;

  ytypes_typelist = { row = float; }; 
  ytypes_root = float;

  ncons = { row = "F_(*)=";};
  ncons = { row = "F_(*)[*]=";};
  ncons = { row = "#must specify some TSpecs";};
  ncons = { row = "T_(*)[*]=*";};
  ncons = { row = "T_ROOT=*";};

  ycons = { row = "F_(*)="; };
  ycons = { row = "F_(*)[*]="; };
  ycons = { row = "F_ROOT="; };
  ycons = { row = "T_(*)[*]=*"; };
  ycons = { row = "T_ROOT=*"; };

  strprintfdat = "%f";

  func = {
   name = fmul; 
   altname = fmul;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[0].d * args[1].d;";
  };
  
  func = {
   name = fdiv; 
   altname = fdiv;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "if ( args[1].d == 0.0 )
          return 1.0;
     else
          return args[0].d / args[1].d;";
  };

  func = {
   name = fadd; 
   altname = fadd;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[0].d + args[1].d;";
  };

  func = {
   name = fsub; 
   altname = fsub;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 2;
   ntypes_node = { row = "(float float)=float"; };
   ytypes_node = { row = "(float float)=float"; };
   type = FUNC_DATA;
   evaltree = -1;
   oper = "return args[0].d - args[1].d;";
  };

  adfarg = {
   name = NULL; 
   altname = a0;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_ARG;
   evaltree = 0;
  };

  adfarg = {
   name = NULL; 
   altname = a1;
   ercfun = NULL;
   ercstr = NULL;
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_ARG;
   evaltree = 1;
  };

  ercs = {
   name = NULL; 
   altname = R;
   ercfun = ercgen;
   ercstr = ercstr;
   lispdefunFIX = { row = "(de R() (1))"; };
   argcnt = 0;
   ntypes_node = { row = "=float"; };
   ytypes_node = { row = "=float"; };
   type = TERM_ERC;
   evaltree = -1;
   fercgenbody = "(random_double()*2.0) - 1.0;";
   fercstrbody = "static char buffer[20];
  sprintf ( buffer, \"%.5f\", d );
  return buffer;";
  };

 };
};



